!pip install soynlp wordcloud matplotlib pandas seaborn

import matplotlib.font_manager as fm
fonts = fm.findSystemFonts(fontpaths=None, fontext='ttf')
for font in fonts:
    if 'malgun' in font.lower() or 'nanum' in font.lower():
        print(font)


import matplotlib.pyplot as plt
from wordcloud import WordCloud
import matplotlib.font_manager as fm

# 사용 가능한 폰트 자동 탐색
font_list = fm.findSystemFonts(fontpaths=None, fontext='ttf')
korean_fonts = [font for font in font_list if 'malgun' in font.lower() or 'nanum' in font.lower()]

# 확인 후 폰트 경로 설정
if korean_fonts:
    font_path = korean_fonts[0]
    print("선택된 폰트 경로:", font_path)
else:
    raise Exception("한글 폰트를 찾을 수 없습니다.")

# 워드클라우드 예시 적용
wc = WordCloud(font_path=font_path, background_color="white", width=800, height=400)
wc.generate("워드클라우드 테스트 한글 폰트 적용")

plt.figure(figsize=(10,5))
plt.imshow(wc, interpolation="bilinear")
plt.axis("off")
plt.show()

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

import matplotlib.pyplot as plt
plt.rc('font', family='NanumBarunGothic')
plt.rcParams['axes.unicode_minus'] =False

import pandas as pd
from collections import Counter
from soynlp.noun import LRNounExtractor_v2
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.font_manager as fm

# Windows의 대표적인 한글폰트로 설정
plt.rc('font', family='NanumBarunGothic')

# 마이너스 기호 깨짐 방지
plt.rcParams['axes.unicode_minus'] = False

# 사용 가능한 한글 폰트 자동 찾기
font_list = fm.findSystemFonts(fontext='ttf')
korean_fonts = [font for font in font_list if 'malgun' in font.lower() or 'nanum' in font.lower()]

if korean_fonts:
    font_path = korean_fonts[0]
    print("선택된 폰트 경로:", font_path)
else:
    raise Exception("한글 폰트를 찾을 수 없습니다.")

topics = ["주식", "우크라이나", "BTC", "AI", "관세", "반도체"]

for topic in topics:
    df = pd.read_csv(f"{topic}_news.csv").dropna(subset=['제목', '미리보기'])
    text_data = df["제목"].astype(str).tolist() + df["미리보기"].astype(str).tolist()
    text_data = [line for line in text_data if line.strip() != '']

    noun_extractor = LRNounExtractor_v2(verbose=False)
    nouns_scores = noun_extractor.train_extract(text_data)

    nouns = [word for word, score in nouns_scores.items() if len(word) > 1]

    counter = Counter()
    for line in text_data:
        words = [word for word in nouns if word in line]
        counter.update(words)

    top_keywords = counter.most_common(15)
    keywords_df = pd.DataFrame(top_keywords, columns=["단어", "빈도수"])

    # 막대그래프
    plt.figure(figsize=(10,6))
    sns.barplot(data=keywords_df, x="빈도수", y="단어", palette="Blues_r")
    plt.title(f"[{topic}] 키워드 빈도수 막대 그래프")
    plt.xlabel("빈도수")
    plt.ylabel("키워드")
    plt.show()

    # 워드클라우드
    wc = WordCloud(font_path=font_path, background_color="white", width=800, height=400)
    wc.generate_from_frequencies(dict(top_keywords))

    plt.figure(figsize=(12,6))
    plt.imshow(wc, interpolation="bilinear")
    plt.axis("off")
    plt.title(f"[{topic}] 키워드 워드클라우드")
    plt.show()
